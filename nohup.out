2020-11-06 16:59:20,971 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.9 (default, Aug 31 2020, 12:42:55) [GCC 7.3.0]
CUDA available: True
GPU 0: Tesla V100-SXM2-32GB
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.1, V10.1.168
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.6.0+cu101
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2019.0.5 Product Build 20190808 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

TorchVision: 0.7.0+cu101
OpenCV: 4.4.0
MMCV: 1.1.6
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.1
MMDetection: 2.6.0+c63888d
------------------------------------------------------------

2020-11-06 16:59:22,307 - mmdet - INFO - Distributed training: False
2020-11-06 16:59:23,414 - mmdet - INFO - Config:
model = dict(
    type='MaskRCNN',
    pretrained='torchvision://resnet50',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=80,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=80,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))))
train_cfg = dict(
    rpn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.7,
            neg_iou_thr=0.3,
            min_pos_iou=0.3,
            match_low_quality=True,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=256,
            pos_fraction=0.5,
            neg_pos_ub=-1,
            add_gt_as_proposals=False),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    rpn_proposal=dict(
        nms_across_levels=False,
        nms_pre=2000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.5,
            min_pos_iou=0.5,
            match_low_quality=True,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=512,
            pos_fraction=0.25,
            neg_pos_ub=-1,
            add_gt_as_proposals=True),
        mask_size=28,
        pos_weight=-1,
        debug=False))
test_cfg = dict(
    rpn=dict(
        nms_across_levels=False,
        nms_pre=1000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.5),
        max_per_img=100,
        mask_thr_binary=0.5))
dataset_type = 'CocoDataset'
classes = ('cell', )
data_root = ''
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=3,
    workers_per_gpu=3,
    train=dict(
        type='CocoDataset',
        classes=('cell', ),
        ann_file=
        '/data/liuzhuang/Github/PubTabNet/table_json/table_coco_train.json',
        img_prefix='/data/liuzhuang/DataSet/pubtabnet/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ]),
    val=dict(
        type='CocoDataset',
        classes=('cell', ),
        ann_file=
        '/data/liuzhuang/Github/PubTabNet/table_json/table_coco_val.json',
        img_prefix='/data/liuzhuang/DataSet/pubtabnet/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        classes=('cell', ),
        ann_file=
        '/data/liuzhuang/Github/PubTabNet/table_json/table_coco_val.json',
        img_prefix='/data/liuzhuang/DataSet/pubtabnet/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(metric=['bbox', 'segm'])
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
total_epochs = 12
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/mask_rcnn_r50_fpn_1x_coco'
gpu_ids = range(0, 1)

2020-11-06 16:59:24,074 - mmdet - INFO - load model from: torchvision://resnet50
2020-11-06 16:59:24,354 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

2020-11-06 17:06:34,812 - mmdet - INFO - Start running, host: liuzhuang@iZ2zeetgpcxrhto5wu5zoyZ, work_dir: /data/liuzhuang/Github/mmdetection/work_dirs/mask_rcnn_r50_fpn_1x_coco
2020-11-06 17:06:34,813 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
loading annotations into memory...
Done (t=358.47s)
creating index...
index created!
loading annotations into memory...
Done (t=7.45s)
creating index...
index created!
2020-11-06 17:07:47,237 - mmdet - INFO - Epoch [1][50/166773]	lr: 1.978e-03, eta: 33 days, 12:24:39, time: 1.447, data_time: 0.979, memory: 6768, loss_rpn_cls: 0.5943, loss_rpn_bbox: 0.3947, loss_cls: 1.6748, acc: 76.7344, loss_bbox: 0.3208, loss_mask: 0.3459, loss: 3.3306
2020-11-06 17:08:39,510 - mmdet - INFO - Epoch [1][100/166773]	lr: 3.976e-03, eta: 28 days, 20:46:06, time: 1.045, data_time: 0.602, memory: 6853, loss_rpn_cls: 0.2681, loss_rpn_bbox: 0.3160, loss_cls: 0.8015, acc: 86.5378, loss_bbox: 0.6003, loss_mask: 0.3177, loss: 2.3035
2020-11-06 17:09:43,652 - mmdet - INFO - Epoch [1][150/166773]	lr: 5.974e-03, eta: 29 days, 3:33:38, time: 1.283, data_time: 0.810, memory: 6853, loss_rpn_cls: 0.1479, loss_rpn_bbox: 0.3024, loss_cls: 0.3746, acc: 84.7200, loss_bbox: 0.5955, loss_mask: 0.2472, loss: 1.6675
2020-11-06 17:10:41,263 - mmdet - INFO - Epoch [1][200/166773]	lr: 7.972e-03, eta: 28 days, 12:44:37, time: 1.152, data_time: 0.684, memory: 6853, loss_rpn_cls: 0.0915, loss_rpn_bbox: 0.2687, loss_cls: 0.3496, acc: 85.8281, loss_bbox: 0.5536, loss_mask: 0.2264, loss: 1.4898
2020-11-06 17:11:43,179 - mmdet - INFO - Epoch [1][250/166773]	lr: 9.970e-03, eta: 28 days, 13:26:46, time: 1.238, data_time: 0.770, memory: 7027, loss_rpn_cls: 0.0668, loss_rpn_bbox: 0.2156, loss_cls: 0.3329, acc: 86.1197, loss_bbox: 0.5060, loss_mask: 0.2089, loss: 1.3302
2020-11-06 17:12:45,275 - mmdet - INFO - Epoch [1][300/166773]	lr: 1.197e-02, eta: 28 days, 14:14:03, time: 1.242, data_time: 0.770, memory: 7027, loss_rpn_cls: 0.0604, loss_rpn_bbox: 0.2191, loss_cls: 0.3091, acc: 86.8773, loss_bbox: 0.4951, loss_mask: 0.2041, loss: 1.2878
2020-11-06 17:13:43,881 - mmdet - INFO - Epoch [1][350/166773]	lr: 1.397e-02, eta: 28 days, 9:16:40, time: 1.172, data_time: 0.720, memory: 7129, loss_rpn_cls: 0.0557, loss_rpn_bbox: 0.2169, loss_cls: 0.2885, acc: 88.4330, loss_bbox: 0.4558, loss_mask: 0.1910, loss: 1.2078
2020-11-06 17:14:48,454 - mmdet - INFO - Epoch [1][400/166773]	lr: 1.596e-02, eta: 28 days, 13:49:22, time: 1.291, data_time: 0.812, memory: 7129, loss_rpn_cls: 0.0506, loss_rpn_bbox: 0.2105, loss_cls: 0.2657, acc: 88.9191, loss_bbox: 0.4543, loss_mask: 0.1917, loss: 1.1728
2020-11-06 17:15:52,484 - mmdet - INFO - Epoch [1][450/166773]	lr: 1.796e-02, eta: 28 days, 16:42:17, time: 1.281, data_time: 0.800, memory: 7129, loss_rpn_cls: 0.0489, loss_rpn_bbox: 0.1935, loss_cls: 0.2722, acc: 88.6202, loss_bbox: 0.4431, loss_mask: 0.2085, loss: 1.1662
2020-11-06 17:16:58,580 - mmdet - INFO - Epoch [1][500/166773]	lr: 1.996e-02, eta: 28 days, 21:16:07, time: 1.322, data_time: 0.847, memory: 7129, loss_rpn_cls: 0.0530, loss_rpn_bbox: 0.1965, loss_cls: 0.2882, acc: 88.1384, loss_bbox: 0.4851, loss_mask: 0.2060, loss: 1.2288
2020-11-06 17:17:58,160 - mmdet - INFO - Epoch [1][550/166773]	lr: 2.000e-02, eta: 28 days, 18:25:05, time: 1.191, data_time: 0.725, memory: 7129, loss_rpn_cls: 0.0628, loss_rpn_bbox: 0.2028, loss_cls: 0.3659, acc: 86.7367, loss_bbox: 0.4540, loss_mask: 0.2002, loss: 1.2857
2020-11-06 17:18:58,521 - mmdet - INFO - Epoch [1][600/166773]	lr: 2.000e-02, eta: 28 days, 16:46:09, time: 1.207, data_time: 0.739, memory: 7130, loss_rpn_cls: 0.0427, loss_rpn_bbox: 0.1808, loss_cls: 0.2720, acc: 88.8103, loss_bbox: 0.4620, loss_mask: 0.2062, loss: 1.1637
2020-11-06 17:19:53,101 - mmdet - INFO - Epoch [1][650/166773]	lr: 2.000e-02, eta: 28 days, 10:26:05, time: 1.092, data_time: 0.637, memory: 7130, loss_rpn_cls: 0.0408, loss_rpn_bbox: 0.1891, loss_cls: 0.2954, acc: 87.3397, loss_bbox: 0.4605, loss_mask: 0.2034, loss: 1.1892
2020-11-06 17:20:55,301 - mmdet - INFO - Epoch [1][700/166773]	lr: 2.000e-02, eta: 28 days, 11:04:37, time: 1.245, data_time: 0.771, memory: 7130, loss_rpn_cls: 0.0419, loss_rpn_bbox: 0.1585, loss_cls: 0.2352, acc: 90.2135, loss_bbox: 0.3937, loss_mask: 0.1892, loss: 1.0185
2020-11-06 17:21:58,178 - mmdet - INFO - Epoch [1][750/166773]	lr: 2.000e-02, eta: 28 days, 12:06:19, time: 1.257, data_time: 0.781, memory: 7366, loss_rpn_cls: 0.0352, loss_rpn_bbox: 0.1539, loss_cls: 0.2565, acc: 89.4835, loss_bbox: 0.4155, loss_mask: 0.2049, loss: 1.0661
2020-11-06 17:23:00,222 - mmdet - INFO - Epoch [1][800/166773]	lr: 2.000e-02, eta: 28 days, 12:25:41, time: 1.241, data_time: 0.772, memory: 7721, loss_rpn_cls: 0.0402, loss_rpn_bbox: 0.1609, loss_cls: 0.2472, acc: 89.8663, loss_bbox: 0.4202, loss_mask: 0.2017, loss: 1.0703
2020-11-06 17:23:59,359 - mmdet - INFO - Epoch [1][850/166773]	lr: 2.000e-02, eta: 28 days, 10:47:56, time: 1.182, data_time: 0.717, memory: 8182, loss_rpn_cls: 0.0364, loss_rpn_bbox: 0.1637, loss_cls: 0.2490, acc: 89.6594, loss_bbox: 0.4094, loss_mask: 0.1917, loss: 1.0502
2020-11-06 17:24:57,588 - mmdet - INFO - Epoch [1][900/166773]	lr: 2.000e-02, eta: 28 days, 8:48:31, time: 1.165, data_time: 0.709, memory: 8182, loss_rpn_cls: 0.0284, loss_rpn_bbox: 0.1503, loss_cls: 0.2012, acc: 91.6393, loss_bbox: 0.3694, loss_mask: 0.1751, loss: 0.9244
2020-11-06 17:26:00,734 - mmdet - INFO - Epoch [1][950/166773]	lr: 2.000e-02, eta: 28 days, 9:53:03, time: 1.263, data_time: 0.788, memory: 8182, loss_rpn_cls: 0.0365, loss_rpn_bbox: 0.1450, loss_cls: 0.2106, acc: 91.2669, loss_bbox: 0.3893, loss_mask: 0.1951, loss: 0.9764
2020-11-06 17:26:59,869 - mmdet - INFO - Exp name: mask_rcnn_r50_fpn_1x_coco.py
2020-11-06 17:26:59,869 - mmdet - INFO - Epoch [1][1000/166773]	lr: 2.000e-02, eta: 28 days, 8:38:28, time: 1.183, data_time: 0.722, memory: 8182, loss_rpn_cls: 0.0286, loss_rpn_bbox: 0.1373, loss_cls: 0.2051, acc: 91.4609, loss_bbox: 0.3629, loss_mask: 0.1886, loss: 0.9224
2020-11-06 17:28:06,771 - mmdet - INFO - Epoch [1][1050/166773]	lr: 2.000e-02, eta: 28 days, 11:36:19, time: 1.338, data_time: 0.858, memory: 8182, loss_rpn_cls: 0.0532, loss_rpn_bbox: 0.1634, loss_cls: 0.2400, acc: 90.1931, loss_bbox: 0.3731, loss_mask: 0.1880, loss: 1.0176
2020-11-06 17:29:01,322 - mmdet - INFO - Epoch [1][1100/166773]	lr: 2.000e-02, eta: 28 days, 8:04:07, time: 1.091, data_time: 0.646, memory: 8182, loss_rpn_cls: 0.0358, loss_rpn_bbox: 0.1496, loss_cls: 0.2408, acc: 90.0489, loss_bbox: 0.3927, loss_mask: 0.1992, loss: 1.0179
2020-11-06 17:30:10,414 - mmdet - INFO - Epoch [1][1150/166773]	lr: 2.000e-02, eta: 28 days, 11:52:27, time: 1.382, data_time: 0.897, memory: 8182, loss_rpn_cls: 0.0330, loss_rpn_bbox: 0.1531, loss_cls: 0.2167, acc: 91.0157, loss_bbox: 0.3683, loss_mask: 0.1871, loss: 0.9582
2020-11-06 17:31:12,607 - mmdet - INFO - Epoch [1][1200/166773]	lr: 2.000e-02, eta: 28 days, 12:08:49, time: 1.243, data_time: 0.773, memory: 8182, loss_rpn_cls: 0.0311, loss_rpn_bbox: 0.1501, loss_cls: 0.2321, acc: 90.2883, loss_bbox: 0.3617, loss_mask: 0.1867, loss: 0.9616
2020-11-06 17:32:10,969 - mmdet - INFO - Epoch [1][1250/166773]	lr: 2.000e-02, eta: 28 days, 10:42:12, time: 1.167, data_time: 0.705, memory: 8182, loss_rpn_cls: 0.0323, loss_rpn_bbox: 0.1523, loss_cls: 0.2228, acc: 90.8398, loss_bbox: 0.3658, loss_mask: 0.1924, loss: 0.9655
2020-11-06 17:33:03,447 - mmdet - INFO - Epoch [1][1300/166773]	lr: 2.000e-02, eta: 28 days, 6:52:04, time: 1.050, data_time: 0.602, memory: 8182, loss_rpn_cls: 0.0315, loss_rpn_bbox: 0.1419, loss_cls: 0.2203, acc: 91.0193, loss_bbox: 0.3561, loss_mask: 0.1835, loss: 0.9333
2020-11-06 17:34:05,558 - mmdet - INFO - Epoch [1][1350/166773]	lr: 2.000e-02, eta: 28 days, 7:15:39, time: 1.242, data_time: 0.775, memory: 8182, loss_rpn_cls: 0.0276, loss_rpn_bbox: 0.1385, loss_cls: 0.2117, acc: 91.1641, loss_bbox: 0.3648, loss_mask: 0.1894, loss: 0.9321
2020-11-06 17:35:08,207 - mmdet - INFO - Epoch [1][1400/166773]	lr: 2.000e-02, eta: 28 days, 7:50:16, time: 1.253, data_time: 0.787, memory: 8182, loss_rpn_cls: 0.0311, loss_rpn_bbox: 0.1296, loss_cls: 0.2095, acc: 91.3724, loss_bbox: 0.3538, loss_mask: 0.1823, loss: 0.9062
2020-11-06 17:36:04,578 - mmdet - INFO - Epoch [1][1450/166773]	lr: 2.000e-02, eta: 28 days, 5:58:19, time: 1.127, data_time: 0.674, memory: 8182, loss_rpn_cls: 0.0251, loss_rpn_bbox: 0.1229, loss_cls: 0.1998, acc: 91.5182, loss_bbox: 0.3496, loss_mask: 0.1830, loss: 0.8805
2020-11-06 17:37:01,917 - mmdet - INFO - Epoch [1][1500/166773]	lr: 2.000e-02, eta: 28 days, 4:35:34, time: 1.147, data_time: 0.691, memory: 8182, loss_rpn_cls: 0.0316, loss_rpn_bbox: 0.1348, loss_cls: 0.2263, acc: 90.5300, loss_bbox: 0.3708, loss_mask: 0.1859, loss: 0.9494
Terminated
train.sh: 2: train.sh: .py: not found
train.sh: 4: train.sh: --gpu-ids: not found
usage: train.py [-h] [--work-dir WORK_DIR] [--resume-from RESUME_FROM]
                [--no-validate]
                [--gpus GPUS | --gpu-ids GPU_IDS [GPU_IDS ...]] [--seed SEED]
                [--deterministic] [--options OPTIONS [OPTIONS ...]]
                [--cfg-options CFG_OPTIONS [CFG_OPTIONS ...]]
                [--launcher {none,pytorch,slurm,mpi}]
                [--local_rank LOCAL_RANK]
                config
train.py: error: unrecognized arguments:  
train.sh: 5: train.sh: --gpu-ids: not found
